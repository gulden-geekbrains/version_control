# Инструкция для работы в Markdown

## Подсказки по командной строке 

### Команда  для linux и MacOs
* Команда для смены директории "cd" 
пример: _"cd c:\folder_name"_
* Команда для отображения текущей директории _"pwd"_
* Команда для листа текущей директории _"ls"_
* Команда для удаления файла _"rm"_
пример: _"rm <filename"_

### Команда для Windows 
* Команда для листа текущей директории _"dir"_
* Команда для удаления файла _"del"_
пример: _"del <filename"_

### Команды для работы в терминале  
 * Перед началом работы в в терминале представится (написать кто работает) и указать электронную почту. с помощью команды _--global_
 пример _"git config --global user.name "Имя" _"git config --global user.emell "emell"

 * Для просмотра дополнительных ключей можно в терминал дать команду _"config"_

 * Для понимания если у нас зафиксированные или не зафиксированные commit мы в терминале запрашиваем статус. пример: _"git status"_
 * Для индексирования файла мы в терминале запрашиваем индексацию файла команду _"add"_
 пример: _"add <filename"_

 * Для фиксации файла мы в терминале запрашиваем индексацию файла команду _"commit"_
  пример: _"commit -m <filename"_ Даем комментарий какие изменения мы внесли, чтобы люди которые будут работать в дальнейшем смогли понимать ход твоих мыслей.
  _-m_ ключ. 
  
 * Для просмотра чтобы посмотреть какие _commit_ мы сделали мы в терминале пишем команду _log_ 
 пример: _git log_
 
 в log можно передовать различные ключи _--oneline_
 пример: _git log --oneline_ (Показывает commit в укороченном варианте)

 * Для перехода между ветвями (листами, черновиками и т.п.) мы в терминале пишем команду _checkout_
  пример: _git checkout <namelista>_

 * Для понимания отличей текущих файлов используем команду _diff_
    пример: _git diff_

 * Для просмотра всех _commit_ которые были задействованы в разных листах(черновиках) используем команду _graph_
пример: _git log --graph_

## Подсказки по командной строке 

### Команда  для linux и MacOs
* Команда для смены директории "cd" 
пример: _"cd c:\folder_name"_
* Команда для отображения текущей директории _"pwd"_
* Команда для листа текущей директории _"ls"_
* Команда для удаления файла _"rm"_
пример: _"rm <filename"_

### Командадля Windows 
* Команда для листа текущей директории _"dir"_
* Команда для удаления файла _"del"_
пример: _"del <filename"_

### Команды для работы в терминале 
 *  Для понимания если у нас зафиксированные или не зафиксированные commit мы в терминале запрашиваем статус. пример: _"git status"_
 * Для индексирования файла мы в терминале запрашиваем индексацию файла команду _"add"_
 пример: _"add <filename"_

 * Для фиксации файла мы в терминале запрашиваем индексацию файла команду _"commit"_
  пример: _"commit -m <filename"_ Даем комментарий какие изменения мы внесли, чтобы люди которые будут работать в дальнейшем смогли понимать ход твоих мыслей.
  _-m_ ключь. 
 * Для просмотра чтобы посмотреть какие _commit_ мы сделали мы в терминале пишем команду _log_ 
 пример: _git log_
 
 в log можно передавать различные ключи _--oneline_
 пример: _git log --oneline_ (Показывает commit в укороченном варианте)

 * Для перехода между ветвями (листами, черновиками и т.п.) мы в терминале пишем команду _checkout_
  пример: _git checkout <namelista>_

 * Для понимания отличия текущих файлов используем команду _diff_
    пример: _git diff_


## Выделения текста 
Чтобы выделить текст курсивом непроходимо обрамить его звёздочками (*). Например, *Вот так* или _вот так_.
Чтобы выделить текст полужирным, необходимо обрамить его звездочками (**). Например, **Вот так** или с помощью двух нижних подчеркивания __вот так__.
Альтернативные способы выделения текста жирным или курсивом для того, чтобы мы могли совмещать оба этих способа.  Например, _текст может быть курсивом и при этом быть **полужирным**_.

## Список 
Чтобы добавить не нумерованные списки, необходимо пункты выделить звездочкой (*) или знаком (+).
Например вот так:
* Элемент 1
* Элемент 2 
+ Элемент 3


Чтобы добавить нумерованные списки, необходимо пункты просто пронумеровать. Например вот так:
1. Первый Пункт  
2. Второй Пункт
3. Третий Пункт

## Работа с изображением  
Чтобы вставить изображение в текст, достаточно написать следующие:
![Привет, прекрасное далеко](priroda-derevya-les-doroga-mashina.jpg)

## Ссылки 
Ссылка на полезные ресурсы [https://translated.turbopages.org/proxy_u/en-ru.ru.0f44d58b-65340bd1-6b6d63f5-74722d776562/https/code.visualstudio.com/docs/terminal/basics/#_links](http.example.com "Всплывающая подсказка")

## Работа с таблицами 
Работа в Markdown с таблицами очень неудобно, но возможна.

Для этого используются символ pipe или вертикальной черты ( | ) для разделения ячеек и дефиса ( - ) для создания строки заголовка.
Заметь, что если внутри ячейки тебе нужно использовать символ вертикальной черты в качестве содержимого, то для этого придется написать HTML код этого символа: &#124;
|name|type|default|description|
|---|---|---|---| 
| 1 | a | b | g |
| 2 | c | d |&#124;|
| ..| ..| ..| ..|

Column | Column
------ | ------
\| Cell \|| \| Cell \|

Column | Column | Column
:----- | :----: | -----:
Left   | Center | Right
align  | align  | align

### Выравнивание
Управлять выравниванием текста в столбцах таблицы ты можешь при помощи двоеточий ( : ). Обрати внимание на двоеточия в строчке с дефисами. Текст в коде таблицы везде смещен влево, но на результате ты увидишь, что он выровнялся в ту сторону, где мы разместили двоеточия.
Проще сначала заполнить таблицу на стороннем ресурсе 
Например: [https://www.tablesgenerator.com/markdown_tables](http.example.com "Для более удобного формирования таблицы")

## Символы 
Когда мы хотим вставить символы, то мы просто можем скопировать символ с любого открытова источника и вставляем 
Например:  Ø,π,©, и так далее. 
А вот с формулами и математическими симвалами куда сложнее, но вот пример как оно смотрится.
Например: $`\sqrt{3x-1}+(1+x)^2`$

## Цитаты 
Что бы создать цитату необходимо поставить перед текстам занк _>"
Например:  
>Ничто так не ограничивает полет мысли начинающего программиста, как компилятор

## Список дел 

Для состовления списка можно использовать [ ] или [x] . Перед контрольным списком введите -<space> или 1.<space> (любое число).
Например: 

* [x] Изучить язык Brainfuck
* [ ] Изучить язык Malbolge
* [ ] Изучить язык Python


## Обучения pull request 
1. Делаем fork репозитория, в которой потом хотим сделать pull request. Ищем кнопку Fork на странице репозитория 
[https://git@github.com:gulden-geekbrains/version_control.git](http.example.com "Пример")

2. Выполняем команду клонирования из своей fork-копии
>git clone git@github.com:*YOURE_GITHUB*/version_control.git

3. Создаем новую ветку и вносим необходимые изменения в файл
* git checkout -b updatereadme
* vim README.md
* git add README.md
* git commit -m "Добавили инструкцию как создать pull request"
4. Делаем push
* git push --set-upstream origin updatereadme
5. Переходим на свою страницу репозитория. Выбираем ветку updatereadme и жмем кнопку Compare & pull request

## Как подружить git с github под Windows 10
### Видео заблокировано необходимо разблокировать для пользователей
Вот видео инструкция https://youtu.be/E8cIjbJMEpE 

## Заметки
Что бы сделать push от другого пользователя необходимо выполнить команду
```sh
GIT_SSH_COMMAND='ssh -i ~/.ssh/user-private-key -o IdentitiesOnly=yes' git push git@github.com:gulden-geekbrains/version_control.git
```
вместо *user-private-key* подставьте свой ключ
Можно прописать настройки для подсоединения по ssh
```sh
git config remote.origin.url git@github.com:gitusername/reponame
git config core.sshCommand "ssh -i ~/.ssh/user-private-key -o IdentitiesOnly=yes"
```

## Заключение
Еще больше полезной информации при работе с языком Markdown можно посмотреть на YouTube 
[https://www.youtube.com/watch?v=jPKi2Addbxw&t=1017s](http.example.com "Markdown - что за язык и как им пользоваться")


